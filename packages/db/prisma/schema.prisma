// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  merchantId    String?   @unique
  merchant      Merchant?

  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Merchant {
  id            String        @id @default(uuid())
  walletAddress String
  businessName  String?
  createdAt     DateTime      @default(now())
  userId        String?       @unique
  apiKey        String?
  user          User?         @relation(fields: [userId], references: [id])
  payments      Payment[]
  PaymentLink   PaymentLink[]
  Invoice       Invoice[]
  QR            QR[]
  Button        Button[]
  APIPayment    APIPayment[]
}

model Payment {
  id              String        @id @default(uuid())
  merchantId      String
  transactionSign String?       @unique
  paidToken       String?
  amount          Float
  payerAddress    String
  status          PaymentStatus @default(PENDING)
  paymentLinkId   String?
  invoiceId       String?       @unique
  buttonId        String?
  qrCodeId        String?
  apiGatewayId    String?
  createdAt       DateTime      @default(now())
  expiresAt       DateTime?
  completedAt     DateTime?
  failedAt        DateTime?
  merchant        Merchant      @relation(fields: [merchantId], references: [id])
  paymentLink     PaymentLink?  @relation(fields: [paymentLinkId], references: [id])
  qrCode          QR?           @relation(fields: [qrCodeId], references: [id])
  invoice         Invoice?      @relation(fields: [invoiceId], references: [id])
  button          Button?       @relation(fields: [buttonId], references: [id])
  apiGateway      APIPayment?   @relation(fields: [apiGatewayId], references: [id])
}

model PaymentLink {
  id         String    @id @default(uuid())
  merchantId String
  amount     String
  status     Status
  createdAt  DateTime  @default(now())
  payments   Payment[]
  merchant   Merchant  @relation(fields: [merchantId], references: [id])
}

model Invoice {
  id         String        @id @default(uuid())
  number     Int           @unique @default(autoincrement())
  name       String?
  email      String?
  merchantId String
  amount     String
  status     PaymentStatus
  createdAt  DateTime      @default(now())
  merchant   Merchant      @relation(fields: [merchantId], references: [id])
  payment    Payment?
}

model QR {
  id         String    @id @default(uuid())
  merchantId String
  amount     String?
  status     Status
  createdAt  DateTime  @default(now())
  payments   Payment[]
  merchant   Merchant  @relation(fields: [merchantId], references: [id])
}

model Button {
  id         String    @id @default(uuid())
  merchantId String
  amount     String?
  status     Status
  createdAt  DateTime  @default(now())
  payments   Payment[]
  Merchant   Merchant  @relation(fields: [merchantId], references: [id])
}

model APIPayment {
  id         String    @id @default(uuid())
  merchantId String
  amount     String?
  status     Status
  createdAt  DateTime  @default(now())
  payments   Payment[]
  merchant   Merchant  @relation(fields: [merchantId], references: [id])
}

enum Status {
  ACTIVE
  DISABLED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  EXPIRED
}
